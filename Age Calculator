from tkinter import *
# * will import all functions from the tkinter

from tkinter import messagebox
# import messagebox class from tkinter

# create function for clearing
# content of all text entry boxes
def clearAll():
    # deleting the content from the entry boxes
    dayField.delete(0, END)
    monthField.delete(0, END)
    yearField.delete(0, END)
    givenDayField.delete(0, END)
    givenMonthField.delete(0, END)
    givenYearField.delete(0, END)
    rsltDayField.delete(0, END)
    rsltMonthField.delete(0, END)
    rsltYearField.delete(0, END)

# function to check for an error
def checkError():
    # if any of the entry field is empty
    # then show an error message and clear
    # all the entries
    if (dayField.get() == "" or monthField.get() == ""
            or yearField.get() == "" or givenDayField.get() == ""
            or givenMonthField.get() == "" or givenYearField.get() == ""):
        # show the error message
        messagebox.showerror("Input Error")

        # clearAll function calling
        clearAll()

        return -1


# function to calculate Age
def calculateAge():
    # check for error
    value = checkError()

    # if error occur then return
    if value == -1:
        return

    else:

        # take a value from the respective entry boxes
        # get method returns current text as string
        birth_day = int(dayField.get())
        birth_month = int(monthField.get())
        birth_year = int(yearField.get())

        given_day = int(givenDayField.get())
        given_month = int(givenMonthField.get())
        given_year = int(givenYearField.get())

        # if birth-date is greater than given birth-month
        # then do not count this month and add 30 to the date so
        # as to subtract the date and get the remaining days
        month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

        if (birth_day > given_day):
            given_month = given_month - 1
            given_day = given_day + month[birth_month - 1]

            # if birth-month exceeds given month, then
            # do not count this year and add 12 to the
            # month so that we can subtract and find out
            # the difference
        if (birth_month > given_month):
            given_year = given_year - 1
            given_month = given_month + 12

        # calculate day, month, year
        calculated_day = given_day - birth_day;
        calculated_month = given_month - birth_month;
        calculated_year = given_year - birth_year;

        # calculated day, month and year then write back
        # to the respective entry boxes

        # use insert method inserting the
        # value in the text entry box.

        rsltDayField.insert(10, str(calculated_day))
        rsltMonthField.insert(10, str(calculated_month))
        rsltYearField.insert(10, str(calculated_year))

    # Driver Code
if __name__ == "__main__":
    # Create a UI window
    acal = Tk()

    # Set the background colour of UI window
    acal.configure(background="#AFEEEE")

    # set the name of tkinter UI window
    acal.title("Age Calculator")

    # Set the configuration of UI window
    acal.geometry("620x300")

    # Create a Date Of Birth : label
    dob = Label(acal, text="Date Of Birth", bg="#40E0D0", relief="groove")

    # Create a Given Date : label
    givenDate = Label(acal, text="Given Date", bg="#40E0D0", relief="groove")

    # Create a Day : label
    day = Label(acal, text="Day", bg="#AFEEEE")

    # Create a Month : label
    month = Label(acal, text="Month", bg="#AFEEEE")
    # Create a message label
    notemsg = Label(acal, text="Enter month's numeric value only", fg="Black", bg="#D3D3D3")

    # Create a Year : label
    year = Label(acal, text="Year", bg="#AFEEEE")

    # Create a Given Day : label
    givenDay = Label(acal, text="Given Day", bg="#AFEEEE")

    # Create a Given Month : label
    givenMonth = Label(acal, text="Given Month", bg="#AFEEEE")
    # Create a message label
    notemsgg = Label(acal, text="Enter month's numeric value only", fg="Black", bg="#D3D3D3")

    # Create a Given Year : label
    givenYear = Label(acal, text="Given Year", bg="#AFEEEE")

    # Create a Years : label
    rsltYear = Label(acal, text="Years", bg="#AFEEEE")

    # Create a Months : label
    rsltMonth = Label(acal, text="Months", bg="#AFEEEE")

    # Create a Days : label
    rsltDay = Label(acal, text="Days", bg="#AFEEEE")

    # Create a Resultant Age Button and attached to calculateAge function
    resultantAge = Button(acal, text="Resultant Age", fg="Black", bg="#FFB6C1", command=calculateAge)

    # Create a Clear All Button and attached to clearAll function
    clearAllEntry = Button(acal, text="Clear All", fg="Black", bg="#FF4500", command=clearAll)

    # Create a text entry box for filling or typing the information.
    dayField = Entry(acal)
    monthField = Entry(acal)
    yearField = Entry(acal)

    givenDayField = Entry(acal)
    givenMonthField = Entry(acal)
    givenYearField = Entry(acal)

    rsltYearField = Entry(acal)
    rsltMonthField = Entry(acal)
    rsltDayField = Entry(acal)

    # grid is a geometry method of tkinter
    # used for placing the widgets in
    # selective positions
    dob.grid(row=0, column=1)

    day.grid(row=1, column=0)
    dayField.grid(row=1, column=1)

    month.grid(row=2, column=0)
    monthField.grid(row=2, column=1)

    notemsg.grid(row=3, column=1)

    year.grid(row=4, column=0)
    yearField.grid(row=4, column=1)

    givenDate.grid(row=0, column=4)

    givenDay.grid(row=1, column=3)
    givenDayField.grid(row=1, column=4)
    givenMonth.grid(row=2, column=3)
    givenMonthField.grid(row=2, column=4)
    notemsgg.grid(row=3, column=4)
    givenYear.grid(row=4, column=3)
    givenYearField.grid(row=4, column=4)
    resultantAge.grid(row=5, column=2)
    #this button will give result
    rsltYear.grid(row=6, column=2)
    rsltYearField.grid(row=7, column=2)
    rsltMonth.grid(row=8, column=2)
    rsltMonthField.grid(row=9, column=2)
    rsltDay.grid(row=10, column=2)
    rsltDayField.grid(row=11, column=2)

    clearAllEntry.grid(row=13, column=2)
    # this button will clear all entry boxes

    # Start the UI
    acal.mainloop()
